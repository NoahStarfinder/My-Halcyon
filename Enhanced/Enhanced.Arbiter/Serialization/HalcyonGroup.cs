/// <license>
///     Copyright (c) Contributors, My-Halcyon Developers
///     See CONTRIBUTORS.TXT for a full list of copyright holders.
///     For an explanation of the license of each contributor and the content it 
///     covers please see the Licenses directory.
/// 
///     Redistribution and use in source and binary forms, with or without
///     modification, are permitted provided that the following conditions are met:
///         * Redistributions of source code must retain the above copyright
///         notice, this list of conditions and the following disclaimer.
///         * Redistributions in binary form must reproduce the above copyright
///         notice, this list of conditions and the following disclaimer in the
///         documentation and/or other materials provided with the distribution.
///         * Neither the name of the Halcyon Project nor the
///         names of its contributors may be used to endorse or promote products
///         derived from this software without specific prior written permission.
/// 
///     THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS ``AS IS'' AND ANY
///     EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
///     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
///     DISCLAIMED. IN NO EVENT SHALL THE CONTRIBUTORS BE LIABLE FOR ANY
///     DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
///     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
///     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
///     ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
///     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
///     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
/// </license>

// automatically generated by the FlatBuffers compiler, do not modify

namespace Enhanced.Arbiter.Serialization
{

using System;
using FlatBuffers;

public struct HalcyonGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static HalcyonGroup GetRootAsHalcyonGroup(ByteBuffer _bb) { return GetRootAsHalcyonGroup(_bb, new HalcyonGroup()); }
  public static HalcyonGroup GetRootAsHalcyonGroup(ByteBuffer _bb, HalcyonGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public HalcyonGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Enhanced.Arbiter.Serialization.HalcyonPrimitive? Root { get { int o = __p.__offset(4); return o != 0 ? (Enhanced.Arbiter.Serialization.HalcyonPrimitive?)(new Enhanced.Arbiter.Serialization.HalcyonPrimitive()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Enhanced.Arbiter.Serialization.HalcyonPrimitive? ChildParts(int j) { int o = __p.__offset(6); return o != 0 ? (Enhanced.Arbiter.Serialization.HalcyonPrimitive?)(new Enhanced.Arbiter.Serialization.HalcyonPrimitive()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildPartsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Enhanced.Arbiter.Serialization.HalcyonPrimitiveBaseShape? Shape { get { int o = __p.__offset(8); return o != 0 ? (Enhanced.Arbiter.Serialization.HalcyonPrimitiveBaseShape?)(new Enhanced.Arbiter.Serialization.HalcyonPrimitiveBaseShape()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<HalcyonGroup> CreateHalcyonGroup(FlatBufferBuilder builder,
      Offset<Enhanced.Arbiter.Serialization.HalcyonPrimitive> rootOffset = default(Offset<Enhanced.Arbiter.Serialization.HalcyonPrimitive>),
      VectorOffset childPartsOffset = default(VectorOffset),
      Offset<Enhanced.Arbiter.Serialization.HalcyonPrimitiveBaseShape> shapeOffset = default(Offset<Enhanced.Arbiter.Serialization.HalcyonPrimitiveBaseShape>)) {
    builder.StartObject(3);
    HalcyonGroup.AddShape(builder, shapeOffset);
    HalcyonGroup.AddChildParts(builder, childPartsOffset);
    HalcyonGroup.AddRoot(builder, rootOffset);
    return HalcyonGroup.EndHalcyonGroup(builder);
  }

  public static void StartHalcyonGroup(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddRoot(FlatBufferBuilder builder, Offset<Enhanced.Arbiter.Serialization.HalcyonPrimitive> rootOffset) { builder.AddOffset(0, rootOffset.Value, 0); }
  public static void AddChildParts(FlatBufferBuilder builder, VectorOffset childPartsOffset) { builder.AddOffset(1, childPartsOffset.Value, 0); }
  public static VectorOffset CreateChildPartsVector(FlatBufferBuilder builder, Offset<Enhanced.Arbiter.Serialization.HalcyonPrimitive>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChildPartsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShape(FlatBufferBuilder builder, Offset<Enhanced.Arbiter.Serialization.HalcyonPrimitiveBaseShape> shapeOffset) { builder.AddOffset(2, shapeOffset.Value, 0); }
  public static Offset<HalcyonGroup> EndHalcyonGroup(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<HalcyonGroup>(o);
  }
  public static void FinishHalcyonGroupBuffer(FlatBufferBuilder builder, Offset<HalcyonGroup> offset) { builder.Finish(offset.Value); }
};

}